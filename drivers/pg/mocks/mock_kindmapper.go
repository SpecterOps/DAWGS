// Code generated by MockGen. DO NOT EDIT.
// Source: drivers/pg/manager.go
//
// Generated by this command:
//
//	mockgen -source=drivers/pg/manager.go -destination=drivers/pg/mocks/mock_kindmapper.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	graph "github.com/specterops/dawgs/graph"
	gomock "go.uber.org/mock/gomock"
)

// MockKindMapper is a mock of KindMapper interface.
type MockKindMapper struct {
	ctrl     *gomock.Controller
	recorder *MockKindMapperMockRecorder
	isgomock struct{}
}

// MockKindMapperMockRecorder is the mock recorder for MockKindMapper.
type MockKindMapperMockRecorder struct {
	mock *MockKindMapper
}

// NewMockKindMapper creates a new mock instance.
func NewMockKindMapper(ctrl *gomock.Controller) *MockKindMapper {
	mock := &MockKindMapper{ctrl: ctrl}
	mock.recorder = &MockKindMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKindMapper) EXPECT() *MockKindMapperMockRecorder {
	return m.recorder
}

// AssertKinds mocks base method.
func (m *MockKindMapper) AssertKinds(ctx context.Context, kinds graph.Kinds) ([]int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssertKinds", ctx, kinds)
	ret0, _ := ret[0].([]int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssertKinds indicates an expected call of AssertKinds.
func (mr *MockKindMapperMockRecorder) AssertKinds(ctx, kinds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertKinds", reflect.TypeOf((*MockKindMapper)(nil).AssertKinds), ctx, kinds)
}

// MapKind mocks base method.
func (m *MockKindMapper) MapKind(ctx context.Context, kind graph.Kind) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapKind", ctx, kind)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapKind indicates an expected call of MapKind.
func (mr *MockKindMapperMockRecorder) MapKind(ctx, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapKind", reflect.TypeOf((*MockKindMapper)(nil).MapKind), ctx, kind)
}

// MapKindID mocks base method.
func (m *MockKindMapper) MapKindID(ctx context.Context, kindID int16) (graph.Kind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapKindID", ctx, kindID)
	ret0, _ := ret[0].(graph.Kind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapKindID indicates an expected call of MapKindID.
func (mr *MockKindMapperMockRecorder) MapKindID(ctx, kindID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapKindID", reflect.TypeOf((*MockKindMapper)(nil).MapKindID), ctx, kindID)
}

// MapKindIDs mocks base method.
func (m *MockKindMapper) MapKindIDs(ctx context.Context, kindIDs []int16) (graph.Kinds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapKindIDs", ctx, kindIDs)
	ret0, _ := ret[0].(graph.Kinds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapKindIDs indicates an expected call of MapKindIDs.
func (mr *MockKindMapperMockRecorder) MapKindIDs(ctx, kindIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapKindIDs", reflect.TypeOf((*MockKindMapper)(nil).MapKindIDs), ctx, kindIDs)
}

// MapKinds mocks base method.
func (m *MockKindMapper) MapKinds(ctx context.Context, kinds graph.Kinds) ([]int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapKinds", ctx, kinds)
	ret0, _ := ret[0].([]int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapKinds indicates an expected call of MapKinds.
func (mr *MockKindMapperMockRecorder) MapKinds(ctx, kinds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapKinds", reflect.TypeOf((*MockKindMapper)(nil).MapKinds), ctx, kinds)
}
